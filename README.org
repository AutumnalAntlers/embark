* embark - Emacs Mini-Buffer Actions Rooted in Keymaps.

This package provides a command =embark-act= to execute actions on the
top minibuffer completion canidate (the one that would be chosen by
minibuffer-force-complete) or on the completion candidate at point
in the completions buffer. You should bind =embark-act= to some key in
=minibuffer-local-completion-map= and in =completion-list-mode-map=.

You can use any command that reads from the minibuffer as an action
and the target of the action will be inserted at the first minibuffer
prompt.  After running =embark-act= all of your keybindings and even
=execute-extended-command= can be used to run a command. 

But for additional convenience, =embark-act= also activates an extra
keymap for you, where you can bind commonly used actions to single
keys. There is a keymap for each "type" of completion. By default
=embark= recognizes the following types of completion: file names,
buffers and symbols (used for functions, variables and commands). The
classification is configurable, see the variable =embark-classifiers=.

For any given type there is a corresponding keymap as noted in
=embark-keymap-alist=. For example, for the completion category =file=, by
default the corresponding keymap is =embark-file-map=. In this keymap
you can bind normal commands you might want to use on file names. For
example, by default =embark-file-map= binds =delete-file= to "d",
=rename-file= to "r" and =copy-file= to "c", among other bindings.

The default keymaps that come with =embark= all set =embark-general-map=
as their parent, so that the actions bound there are available no
matter what type of completion you are in the middle of. By default
this includes bindings to save the current candidate in the kill
ring and to insert the current candidate in the previously selected
buffer (the buffer that was current when you executed a command that
opened up the minibuffer).

** Not waiting for confirmation

By default =embark= just inserts the target of the action into the next
minibuffer prompt but doesn't "press =RET=" for you.  This is a prudent
default, to let you examine the minibuffer before commiting to execute
the action.  But if you want to live dangerously you can put the
=embark-ratify= property on a command for which you want =embark= to
"automatically press =RET=".  For example, to have =embark= kill buffers
without confirmation use:

#+begin_src emacs-lisp
(put 'kill-buffer 'embark-ratify t)
#+end_src

** Actions that do not read from the minibuffer

Additionally you can write your own commands that do not read from
the minibuffer but act on the current target anyway: just use the
=embark-target= function (exactly once!: it "self-destructs") to
retrieve the current target. See the definitions of =embark-insert= or
=embark-save= for examples.

** Showing a reminder of available actions

If you wish to see a reminder of which actions are available, you can
install [[https://github.com/justbur/emacs-which-key][which-key]] and use =which-key-mode= with the
=which-key-show-transient-maps= variable set to =t=.

** Creating your own keymaps

All internal keymaps are generated by a helper function
=embark-keymap= that you can use it to generate keymaps for new
categories in =embark-keymap-alist= or for any other purpose! Here is
how the =embark-file-map= is defined, for example a simple version of
the file action keymap coud be define as follows:

#+BEGIN_SRC emacs-lisp
(defvar embark-file-map
  (embark-keymap
   '(("d" . delete-file)
     ("r" . rename-file)
     ("c" . copy-file))
   embark-general-map))
#+END_SRC

