* News

Some changes are being made to Embark, to better cooperate with the
[[https://github.com/minad/marginalia][Marginalia]] and [[https://github.com/minad/consult][Consult]] packages, and prior to being submitted to
MELPA. You may wish to hold off on updating Embark, or, help me out by
updating aggresively and filing issue reports here on GitHub.

Niether of those packages is a dependency of Embark, but Marginalia is
highly recommended, for reasons explained in the rest of this section

Embark comes with actions for symbols (commands, functions, variables
with actions such as finding the definition, looking up the
documentation, evaluating, etc.) in the =embark-symbol-map= keymap, and
for packages (actions like install, delete, browse url, etc.) in the
=embark-package-keymap=.

Unfortunately Embark no longer automatically offers you these keymaps
when relevant, because many built-in Emacs commands don't report
accurate category metadata. For example, a command like
=describe-package=, which reads a package name from the minibuffer, does
not have metadata indicating so.

Previously Embark had functions to supply this missing metadata, but
they have been moved to Marginalia, which augments many Emacs command
to report accurate category metadata. Simply activating
=marginalia-mode= allows Embark to offer you the package and symbol
actions when appropriate again.

All annotation functions have been removed from Embark and moved to
Marginalia (where they have been improved!). Embark used these old
annotation functions for the list view in Embark Occur buffers.

- If you install Marginalia and activate =marginalia-mode=, Embark Occur
  buffer will use the Marginalia annotations automatically.

- If you don't install Marginalia, you will see only the annotations
  that come with Emacs (such as keybindings in =M-x=, or the unicode
  characters in =C-x 8 RET=).

Other small changes:

- If you have Consult installed and call =embark-occur= from
  =consult-line=, =consult-mark= or =consult-outline=, you will notice the
  Embark Occur buffer starts in list view by default.
- The function =embark-open-externally= has been removed following the
  policy of avoiding overlap with Consult. If you used that action,
  add [[https://github.com/minad/consult/blob/373498acb76b9395e5e590fb8e39f671a9363cd7/consult.el#L707][the small function]] to your configuration or install Consult and
  use =consult-file-externally=.

Work still left to do:

- Update this readme! It doesn't mention =embark-occur= or =embark-export=
  at all!
  
* embark - Emacs Mini-Buffer Actions Rooted in Keymaps

This package provides a command =embark-act= (and a variant
=embark-act-noexit=), to execute actions on the top minibuffer
completion canidate: the one that would be chosen by
=minibuffer-force-complete=. Additionally, =embark-act= can act on the
completion candidate at point in the completions buffer. You should
bind both of them in =minibuffer-local-completion-map= and also bind
=embark-act= in =completion-list-mode-map=.

You can use any command that reads from the minibuffer as an action
and the target of the action will be inserted at the first minibuffer
prompt.  After running =embark-act= all of your keybindings and even
=execute-extended-command= can be used to run a command. 

But for additional convenience, =embark-act= also activates an extra
keymap for you, where you can bind commonly used actions to single
keys. There is a keymap for each "type" of completion. By default
=embark= recognizes the following types of completion: file names,
buffers and symbols (used for functions, variables and commands). The
classification is configurable, see the variable =embark-classifiers=.

For any given type there is a corresponding keymap as noted in
=embark-keymap-alist=. For example, for the completion category =file=, by
default the corresponding keymap is =embark-file-map=. In this keymap
you can bind normal commands you might want to use on file names. For
example, by default =embark-file-map= binds =delete-file= to "d",
=rename-file= to "r" and =copy-file= to "c", among other bindings.

The default keymaps that come with =embark= all set =embark-general-map=
as their parent, so that the actions bound there are available no
matter what type of completion you are in the middle of. By default
this includes bindings to save the current candidate in the kill
ring and to insert the current candidate in the previously selected
buffer (the buffer that was current when you executed a command that
opened up the minibuffer).

You can read about the [[https://github.com/oantolin/embark/wiki/Default-Actions][default actions and their keybindings]]
on the GitHub project wiki.

** Allowing the target to be edited before acting on it

By default, for most commands =embark= inserts the target of the action
into the next minibuffer prompt and "presses =RET=" for you, accepting
the target as is.

For some commands this might be undesirable, either for safety
(because a command is "hard to undo", like =delete-file= or
=kill-buffer)=, or because further input is required next to the target
(like when using =shell-command=: the target is the file and you still
need to enter a shell command to run on it, at the same prompt). You
can add such commands to the =embark-allow-edit-commands= variable
(which by default already contains the examples mentioned, and a few
others as well).

Now, automatically pressing =RET= for most commands is only the default.
If you set the variable =embark-allow-edit-default= to =t=, then =embark=
will instead give you a chance to edit the target before acting upon
it, for all commands except those listed in =embark-skip-edit-commands=.

** Running some setup after injecting the target

You can customize what happens after the target is inserted at the
minibuffer prompt of an action. There is a hook, =embark-setup-hook=,
that is run by default after injecting the target into the minibuffer.
This hook can be overidden for specific action commands by associating
the command to the desired overriding hook in =embark-setup-overrides=.

For example, consider using =shell-command= as an action during file
completion. It would be useful to insert a space before the target
file name and to leave the point at the beginning, so you can
immediately type the shell command. That's why in =embark='s default
configuration there is an entry in =embark-setup-overrides= associating
=shell-command= to =embark--shell-prep=, a simple helper command that
quotes all the spaces in the file name, inserts an extra space at the
beginning of the line and leaves point to the left of it.

** Actions that do not read from the minibuffer

You can also write your own commands that do not read from the
minibuffer but act on the current target anyway: just use the
=embark-target= function (exactly once!: it "self-destructs") to
retrieve the current target. See the definitions of =embark-insert= or
=embark-save= for examples.

** Showing a reminder of available actions

If you wish to see a reminder of which actions are available, you can
install [[https://github.com/justbur/emacs-which-key][which-key]] and use =which-key-mode= with the
=which-key-show-transient-maps= variable set to =t=. You may want to
unclutter the display by removing all of the keybindings for the
universal prefix arguments, namely =C-u= and the digits and minus (as
well as their numeric keypad counterparts):

#+begin_src emacs-lisp
  (push '(("^[0-9-]\\|kp-[0-9]\\|kp-subtract\\|C-u$" . nil) . ignore)
        which-key-replacement-alist)
#+end_src

** Creating your own keymaps

All internal keymaps are generated by a helper function =embark-keymap=
that you can use it to generate keymaps for new categories in
=embark-keymap-alist= or for any other purpose! For example a simple
version of the file action keymap coud be defined as follows:

#+BEGIN_SRC emacs-lisp
(defvar embark-file-map
  (embark-keymap
   '(("d" . delete-file)
     ("r" . rename-file)
     ("c" . copy-file))
   embark-general-map))
#+END_SRC

